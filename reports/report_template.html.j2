<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>Отчёт SecAudit++</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <style>
    .code-pre { white-space: pre-wrap; word-break: break-word; }
    .mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
    .small-mono { font-size: .875rem; }
    .table-sm td, .table-sm th { vertical-align: middle; }
    .badge-pill { border-radius: 1rem; }
    .sticky-header thead th { position: sticky; top: 0; z-index: 2; background-color: var(--bs-body-bg); }
    .filters .form-label { font-size: .8rem; text-transform: uppercase; letter-spacing: .08em; }
    @media print {
      body { background: #ffffff !important; color: #000000 !important; }
      .no-print { display: none !important; }
      a { color: #000 !important; text-decoration: none !important; }
    }
    @media (prefers-color-scheme: dark) {
      body { background-color: #111417; color: #e7eaef; }
      .card { background-color: #1b1f24; color: inherit; border-color: #2b3036; }
      .accordion-button { background-color: #1b1f24; color: inherit; }
      .accordion-button:not(.collapsed) { background-color: #242933; color: inherit; }
      .table { color: inherit; }
      .table thead th { background-color: #2b3036; color: #f8f9fa; }
      .badge.bg-info { color: #0b1727 !important; }
    }
  </style>
</head>
<body>
  {# =========================== SETTINGS =========================== #}
  {% set OUTPUT_TRIM = 400 %}

  {# =========================== HELPERS ============================ #}
  {% macro norm_status(r) -%}
    {%- set s = (r.status if r.status is defined else r.result|default('')) -%}
    {%- set s = s|string -%}
    {%- if s|lower in ['pass','ok','success'] or s == 'PASS' -%}pass
    {%- elif s|lower in ['fail','failed'] or s == 'FAIL' -%}fail
    {%- elif s|lower in ['error','err'] -%}error
    {%- else -%}unknown
    {%- endif -%}
  {%- endmacro %}

  {% macro sev_badge(sev) -%}
    {%- set v = (sev|string|lower) -%}
    {%- if v == 'high' -%}<span class="badge bg-danger">HIGH</span>
    {%- elif v == 'medium' -%}<span class="badge bg-warning text-dark">Medium</span>
    {%- elif v == 'low' -%}<span class="badge bg-success">Low</span>
    {%- else -%}<span class="badge bg-secondary">n/a</span>
    {%- endif -%}
  {%- endmacro %}

  {% macro result_badge(s) -%}
    {%- set s = s|lower -%}
    {%- if s == 'pass' -%}<span class="text-success fw-semibold">Успешно</span>
    {%- elif s == 'fail' -%}<span class="text-danger fw-semibold">Не пройдено</span>
    {%- elif s == 'error' -%}<span class="text-warning fw-semibold">Ошибка</span>
    {%- else -%}<span class="text-muted">Неопределён</span>
    {%- endif -%}
  {%- endmacro %}

    {{ (text|default('')|replace('\r','')|trim|truncate(OUTPUT_TRIM, True)) }}
  {%- endmacro %}

  {% macro format_expect(value) -%}
    {%- if value is mapping or (value is sequence and (value is not string)) -%}
      {{ value|tojson(ensure_ascii=False) }}
    {%- else -%}
      {{ value|default('') }}
    {%- endif -%}
  {%- endmacro %}


  {# ======================== KPI / SUMMARY ======================== #}
  {% set total = results|length %}
  {% set passed = results|selectattr('status','equalto','pass')|list|length %}
  {% if passed == 0 %}{% set passed = results|selectattr('result','equalto','PASS')|list|length %}{% endif %}
  {% set failed = results|selectattr('status','equalto','fail')|list|length %}
  {% if failed == 0 %}{% set failed = results|selectattr('result','equalto','FAIL')|list|length %}{% endif %}
  {% set errors = results|selectattr('status','equalto','error')|list|length %}
  {% set unknown = total - passed - failed - errors %}
  {% set compliance = (100.0 * passed / total) | round(1) if total > 0 else 0 %}

  <div class="container my-4">
    <h1 class="mb-3">Отчёт SecAudit++</h1>

    <div class="row g-3 mb-4">
      <div class="col-12 col-lg-8">
        <div class="card">
          <div class="card-body">
            <div class="d-flex flex-wrap gap-4">
              <div><div class="text-muted small">Профиль</div><div class="fw-semibold">{{ (profile.profile_name if profile is defined and profile.profile_name is defined else profile_name|default('—')) }}</div></div>
              <div><div class="text-muted small">Описание</div><div>{{ (profile.description if profile is defined and profile.description is defined else profile_description|default('—')) }}</div></div>
              <div><div class="text-muted small">Дата</div><div>{{ (now.strftime("%Y-%m-%d %H:%M:%S") if now is defined else timestamp|default('—')) }}</div></div>
              {% set host_info = host if host is defined else {} %}
              <div><div class="text-muted small">ОС</div><div>{{ host_info.os|default('—') }}</div></div>
              <div><div class="text-muted small">Ядро</div><div>{{ host_info.kernel|default('—') }}</div></div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-12 col-lg-4">
        <div class="card h-100">
          <div class="card-body">
            <div class="row text-center g-3">
              <div class="col">
                <div class="text-muted small">Всего</div>
                <div class="fs-4 fw-bold">{{ total }}</div>
              </div>
              <div class="col">
                <div class="text-muted small">✅ Pass</div>
                <div class="fs-4 text-success fw-bold">{{ passed }}</div>
              </div>
              <div class="col">
                <div class="text-muted small">❌ Fail</div>
                <div class="fs-4 text-danger fw-bold">{{ failed }}</div>
              </div>
              <div class="col">
                <div class="text-muted small">⚠️ Err</div>
                <div class="fs-4 text-warning fw-bold">{{ errors }}</div>
              </div>
            </div>
            <hr/>
            <div class="d-flex justify-content-between align-items-center">
              <div class="text-muted small">Индекс соответствия</div>
              <div class="fs-5 fw-bold">{{ compliance }}%</div>
            </div>
            <div class="progress mt-2" role="progressbar" aria-valuenow="{{ compliance }}" aria-valuemin="0" aria-valuemax="100">
              <div class="progress-bar" style="width: {{ compliance }}%"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-4 shadow-sm no-print filters">
      <div class="card-body">
        <div class="row g-3 align-items-end">
          <div class="col-12 col-md-4 col-xl-3">
            <label class="form-label" for="filter-search">Поиск</label>
            <input type="search" class="form-control" id="filter-search" placeholder="ID или название" />
          </div>
          <div class="col-6 col-md-4 col-xl-2">
            <label class="form-label" for="filter-severity">Severity</label>
            <select class="form-select" id="filter-severity">
              <option value="all">Все</option>
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </div>
          <div class="col-6 col-md-4 col-xl-2">
            <label class="form-label" for="filter-status">Статус</label>
            <select class="form-select" id="filter-status">
              <option value="all">Все</option>
              <option value="pass">PASS</option>
              <option value="fail">FAIL</option>
              <option value="error">ERROR</option>
              <option value="unknown">UNDEF</option>
            </select>
          </div>
          <div class="col-12 col-md-4 col-xl-3">
            <label class="form-label" for="filter-tags">Теги</label>
            <input type="text" class="form-control" id="filter-tags" placeholder="fstec:упд.7, cis:5.2" />
          </div>
          <div class="col-12 col-md-4 col-xl-2 text-md-end">
            <div class="d-flex gap-2 flex-column flex-md-row">
              <button type="button" class="btn btn-outline-secondary w-100" id="export-csv">Экспорт CSV</button>
              <button type="button" class="btn btn-outline-secondary w-100" id="export-json">Экспорт JSON</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    {# =================== МОДУЛИ (АККОРДЕОН) =================== #}
    <div class="accordion" id="modulesAccordion">
      {% for module, checks in results | groupby('module') %}
      <div class="accordion-item">
        <h2 class="accordion-header" id="heading-{{ loop.index }}">
          <button class="accordion-button {% if not loop.first %}collapsed{% endif %}" type="button"
                  data-bs-toggle="collapse"
                  data-bs-target="#collapse-{{ loop.index }}"
                  aria-expanded="{{ 'true' if loop.first else 'false' }}"
                  aria-controls="collapse-{{ loop.index }}">
            Модуль: {{ module | capitalize }} ({{ checks | length }} проверок)
          </button>
        </h2>
        <div id="collapse-{{ loop.index }}" class="accordion-collapse collapse {% if loop.first %}show{% endif %}"
             aria-labelledby="heading-{{ loop.index }}" data-bs-parent="#modulesAccordion">
          <div class="accordion-body">

            {% set module_idx = loop.index %}
            <div class="table-responsive">
              <table class="table table-sm table-bordered align-middle sticky-header">
                <thead class="table-light">
                  <tr>
                    <th style="width:3ch;">#</th>
                    <th>Проверка</th>
                    <th style="width:9ch;">Sev</th>
                    <th style="width:10ch;">Результат</th>
                    <th style="width:12ch;">Assert</th>
                    <th>Ожидание</th>
                    <th>ФСТЭК №21</th>
                    <th style="width:1%"></th>
                  </tr>
                </thead>
                <tbody>
                {% for check in checks %}
                  {% set s = norm_status(check) %}
                  {% set expect_display = format_expect(check.expect) %}
                  {% set tag_strings = [] %}
                  {% if check.tags %}
                    {% for key, value in check.tags.items() %}
                      {% if value is string %}
                        {% set tag_strings = tag_strings + [ (key ~ ':' ~ value)|lower ] %}
                      {% elif value is sequence %}
                        {% for item in value %}
                          {% set tag_strings = tag_strings + [ (key ~ ':' ~ item)|lower ] %}
                        {% endfor %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                  {% set tag_strings = tag_strings + [module|string|lower] %}
                  <tr class="check-row"
                      data-index="{{ loop.index }}"
                      data-module="{{ module|string|lower }}"
                      data-severity="{{ check.severity|default('low')|lower }}"
                      data-status="{{ s }}"
                      data-tags="{{ tag_strings|join(' ')|e }}"
                      data-search="{{ (check.name ~ ' ' ~ check.id ~ ' ' ~ (check.command or '') ~ ' ' ~ (check.reason or ''))|lower|e }}"
                      data-id="{{ check.id|default('')|e }}"
                      data-name="{{ check.name|default('')|e }}"
                      data-command="{{ check.command|default('')|e }}"
                      data-assert="{{ check.assert_type|default('exact')|e }}"
                      data-expect="{{ expect_display|string|e }}"
                      data-reason="{{ check.reason|default('')|e }}"
                      data-output="{{ short_output(check.output)|e }}"
                      data-evidence="{{ check.evidence|default('')|e }}">
                    <td class="text-muted">{{ loop.index }}</td>
                    <td>
                      <div class="fw-semibold">{{ check.name }}</div>
                      <div class="small text-muted mono">ID: {{ check.id }}</div>
                      {% if check.command %}
                      <details class="small mt-1">
                        <summary class="text-muted">Команда</summary>
                        <pre class="code-pre small-mono">{{ check.command }}</pre>
                      </details>
                      {% endif %}
                    </td>
                    <td>{{ sev_badge(check.severity) }}</td>
                    <td>{{ result_badge(s) }}</td>
                    <td><span class="badge bg-secondary badge-pill mono">{{ check.assert_type|default('exact') }}</span></td>
                    <td><span class="mono small">{{ expect_display|safe }}</span></td>
                    <td>{{ fstec_badges(fl) }}</td>
                    <td class="text-end">
                      <button class="btn btn-sm btn-outline-primary" type="button"
                              data-bs-toggle="collapse"
                              data-bs-target="#output-{{ module_idx }}-{{ loop.index }}"
                              aria-expanded="false"
                              aria-controls="output-{{ module_idx }}-{{ loop.index }}">
                        Вывод
                      </button>
                    </td>
                  </tr>
                  <tr class="collapse" id="output-{{ module_idx }}-{{ loop.index }}">
                    <td colspan="8">
                      <pre class="code-pre mono mb-0">{{ short_output(check.output)|e }}</pre>
                      {% if check.reason %}
                        <div class="small text-muted mt-2">Причина: {{ check.reason }}</div>
                      {% endif %}
                      {% if check.evidence %}
                        <div class="small text-muted">Улика: {{ check.evidence }}</div>
                      {% endif %}
                    </td>
                  </tr>
                {% endfor %}
                </tbody>
              </table>
            </div>

          </div>
        </div>
      </div>
      {% endfor %}
    </div>

    {# ============== СВОДКА ПО МЕРАМ ФСТЭК №21 ============== #}
    {% set seen = {} %}
    {% for r in results %}
        {% if code != '' %}
          {% set _ = seen.update({code: (seen.get(code, []) + [r])}) %}
        {% endif %}
      {% endfor %}
    {% endfor %}

    <hr class="my-4"/>

    <h2 class="h4 mb-3">Сводка по мерам ФСТЭК №21</h2>
    {% if seen %}
      <div class="table-responsive">
        <table class="table table-sm table-hover table-bordered align-middle sticky-header">
          <thead class="table-light">
            <tr>
              <th style="width:10ch;">Мера</th>
              <th>Описание</th>
              <th class="text-end" style="width:8ch;">Всего</th>
              <th class="text-end text-success" style="width:8ch;">Pass</th>
              <th class="text-end text-danger" style="width:8ch;">Fail</th>
              <th class="text-end text-warning" style="width:8ch;">Error</th>
            </tr>
          </thead>
          <tbody>
            {% for m, rs in seen|dictsort %}
              {% set p = rs | selectattr('status','equalto','pass') | list | length %}
              {% if p == 0 %}{% set p = rs | selectattr('result','equalto','PASS') | list | length %}{% endif %}
              {% set f = rs | selectattr('status','equalto','fail') | list | length %}
              {% if f == 0 %}{% set f = rs | selectattr('result','equalto','FAIL') | list | length %}{% endif %}
              {% set e = rs | selectattr('status','equalto','error') | list | length %}
              <tr>
                <td><span class="badge bg-info text-dark">{{ m }}</span></td>
                <td>{{ FSTEK21.get(m, '—') }}</td>
                <td class="text-end">{{ rs|length }}</td>
                <td class="text-end">{{ p }}</td>
                <td class="text-end">{{ f }}</td>
                <td class="text-end">{{ e }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    {% else %}
      <p class="text-muted">Теги ФСТЭК №21 в проверках отсутствуют.</p>
    {% endif %}

    {# ============== КРИТИЧЕСКИЕ (HIGH) НЕСООТВЕТСТВИЯ ============== #}
    {% set highs = results
      | selectattr('severity','equalto','high')
      | selectattr('status','equalto','fail') | list %}
    {% if highs|length == 0 %}
      {% set highs = results
        | selectattr('severity','equalto','high')
        | selectattr('result','equalto','FAIL') | list %}
    {% endif %}

    <hr class="my-4"/>
    <h2 class="h4">Критические несоответствия (High)</h2>
    {% if highs %}
      <div class="list-group mb-5">
        {% for r in highs %}
        <div class="list-group-item">
          <div class="d-flex justify-content-between">
            <div class="fw-semibold">{{ r.name }}</div>
            <div>{{ sev_badge(r.severity) }}</div>
          </div>
          <div class="small text-muted mono">ID: {{ r.id }} · Модуль: {{ r.module }}</div>
          </div>
          {% if r.expect %}
          <div class="small mt-2"><span class="text-muted">Ожидание:</span> <span class="mono">{{ format_expect(r.expect)|safe }}</span></div>
          {% endif %}
          <div class="small mt-1"><span class="text-muted">Assert:</span> <span class="badge bg-secondary mono">{{ r.assert_type|default('exact') }}</span></div>
          {% if r.command %}
          <details class="mt-2">
            <summary class="text-muted">Команда</summary>
            <pre class="code-pre small-mono">{{ r.command }}</pre>
          </details>
          {% endif %}
          <details class="mt-2">
            <summary class="text-muted">Фактический вывод</summary>
            <pre class="code-pre mono">{{ r.output|default('—', true)|trim }}</pre>
          </details>
        </div>
        {% endfor %}
      </div>
    {% else %}
      <p class="text-muted mb-5">Критических несоответствий не выявлено.</p>
    {% endif %}

  </div> <!-- /container -->

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('filter-search');
      const severitySelect = document.getElementById('filter-severity');
      const statusSelect = document.getElementById('filter-status');
      const tagsInput = document.getElementById('filter-tags');
      const exportCsvBtn = document.getElementById('export-csv');
      const exportJsonBtn = document.getElementById('export-json');
      const rows = Array.from(document.querySelectorAll('.check-row'));

      if (!rows.length) {
        return;
      }

      const normalize = (value) => (value || '').toLowerCase();

      function toggleDetailRow(row, visible) {
        const detailRow = row.nextElementSibling;
        if (!detailRow || !detailRow.classList.contains('collapse')) {
          return;
        }
        if (!visible) {
          detailRow.classList.remove('show');
          detailRow.style.display = 'none';
        } else {
          detailRow.style.display = '';
        }
      }

      function applyFilters() {
        const query = normalize(searchInput ? searchInput.value : '');
        const severity = severitySelect ? severitySelect.value : 'all';
        const status = statusSelect ? statusSelect.value : 'all';
        const tagsRaw = normalize(tagsInput ? tagsInput.value : '');
        const tagTokens = tagsRaw.split(/[,\s]+/).filter(Boolean);

        rows.forEach((row) => {
          let visible = true;
          const rowSeverity = normalize(row.dataset.severity);
          const rowStatus = normalize(row.dataset.status);
          const rowTags = normalize(row.dataset.tags);
          const rowSearch = normalize(row.dataset.search);

          if (severity !== 'all' && rowSeverity !== severity) {
            visible = false;
          }

          if (status !== 'all' && rowStatus !== status) {
            visible = false;
          }

          if (tagTokens.length && !tagTokens.every((token) => rowTags.includes(token))) {
            visible = false;
          }

          if (query && !rowSearch.includes(query)) {
            visible = false;
          }

          row.style.display = visible ? '' : 'none';
          toggleDetailRow(row, visible);
        });
      }

      function gatherRowData(row) {
        return {
          id: row.dataset.id || '',
          name: row.dataset.name || '',
          module: row.dataset.module || '',
          severity: row.dataset.severity || '',
          status: row.dataset.status || '',
          assert: row.dataset.assert || '',
          expect: row.dataset.expect || '',
          tags: row.dataset.tags || '',
          command: row.dataset.command || '',
          reason: row.dataset.reason || '',
          output: row.dataset.output || '',
          evidence: row.dataset.evidence || ''
        };
      }

      function visibleRows() {
        return rows.filter((row) => row.style.display !== 'none');
      }

      function downloadFile(content, filename, mime) {
        const blob = new Blob([content], { type: mime });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      }

      function exportCsv() {
        const data = visibleRows().map(gatherRowData);
        if (!data.length) {
          return;
        }
        const headers = ['id','name','module','severity','status','assert','expect','tags','command','reason','output','evidence'];
        const escapeValue = (value) => '"' + String(value ?? '').replace(/"/g, '""') + '"';
        let csv = headers.map(escapeValue).join(',') + '\n';
        data.forEach((row) => {
          csv += headers.map((key) => escapeValue(row[key])).join(',') + '\n';
        });
        downloadFile('\ufeff' + csv, 'secaudit-checks.csv', 'text/csv;charset=utf-8;');
      }

      function exportJson() {
        const data = visibleRows().map(gatherRowData);
        if (!data.length) {
          return;
        }
        downloadFile(JSON.stringify(data, null, 2), 'secaudit-checks.json', 'application/json;charset=utf-8;');
      }

      if (searchInput) { searchInput.addEventListener('input', applyFilters); }
      if (severitySelect) { severitySelect.addEventListener('change', applyFilters); }
      if (statusSelect) { statusSelect.addEventListener('change', applyFilters); }
      if (tagsInput) { tagsInput.addEventListener('input', applyFilters); }
      if (exportCsvBtn) { exportCsvBtn.addEventListener('click', exportCsv); }
      if (exportJsonBtn) { exportJsonBtn.addEventListener('click', exportJson); }

      applyFilters();
    });
  </script>
</body>
</html>
