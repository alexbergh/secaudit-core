{# =========================== SETTINGS =========================== #}
{# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ output –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö #}
{% set OUTPUT_TRIM = 200 %}

{# =========================== HELPERS ============================ #}
{% macro norm_status(r) -%}
  {%- set s = (r.status if r.status is defined else r.result|default('')) -%}
  {%- set s = s|string -%}
  {%- if s|lower in ['pass','ok','success'] or s == 'PASS' -%}pass
  {%- elif s|lower in ['fail','failed'] or s == 'FAIL' -%}fail
  {%- elif s|lower in ['error','err'] -%}error
  {%- else -%}unknown
  {%- endif -%}
{%- endmacro %}

{% macro status_badge(s) -%}
  {%- set s = s|lower -%}
  {%- if s == 'pass' -%}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ
  {%- elif s == 'fail' -%}‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ
  {%- elif s == 'error' -%}‚ö†Ô∏è –û—à–∏–±–∫–∞
  {%- else -%}‚ùî –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω
  {%- endif -%}
{%- endmacro %}

{% macro sev_badge(sev) -%}
  {%- set v = (sev|string|lower) -%}
  {%- if v == 'high' -%}**üî¥ HIGH**
  {%- elif v == 'medium' -%}üü† Medium
  {%- elif v == 'low' -%}üü¢ Low
  {%- else -%}n/a
  {%- endif -%}
{%- endmacro %}

{% macro format_expect(value) -%}
  {%- if value is mapping or (value is sequence and (value is not string)) -%}
    {{ value|tojson(ensure_ascii=False) }}
  {%- else -%}
    {{ value|default('') }}
  {%- endif -%}
{%- endmacro %}

{% set FSTEK21 = FSTEK21 | default({}, true) %}

{% macro fstec_codes(details) -%}
  {%- if details and details|length > 0 -%}
    {{ details | map(attribute='code') | reject('equalto', None) | list | join(', ') }}
  {%- else -%}
    ‚Äî
  {%- endif -%}
{%- endmacro %}

{% macro fstec_summary(details) -%}
  {%- if details and details|length > 0 -%}
    {%- set ns = namespace(parts=[]) -%}
    {%- for item in details -%}
      {%- set code = item.code|string -%}
      {%- set desc = item.description -%}
      {%- if desc -%}
        {%- set text = '**' ~ desc ~ '** (' ~ code ~ ')' -%}
      {%- else -%}
        {%- set text = code -%}
      {%- endif -%}
      {%- set ns.parts = ns.parts + [text] -%}
    {%- endfor -%}
    {{ ns.parts|join('; ') }}
  {%- else -%}
    ‚Äî
  {%- endif -%}
{%- endmacro %}

{# –£—Ç–∏–ª–∏—Ç–∞: –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ output #}
{% macro short_output(text) -%}
  {{ (text|default('')|replace('\n',' ')|trim|truncate(OUTPUT_TRIM, True)) }}
{%- endmacro %}

{# =========================== HEADER ============================ #}
# –û—Ç—á—ë—Ç SecAudit++

**–ü—Ä–æ—Ñ–∏–ª—å:** {{ (profile.profile_name if profile is defined and profile.profile_name is defined else profile_name|default('‚Äî')) }}  
**–û–ø–∏—Å–∞–Ω–∏–µ:** {{ (profile.description if profile is defined and profile.description is defined else profile_description|default('‚Äî')) }}  
**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:** {{ (now.strftime("%Y-%m-%d %H:%M:%S") if now is defined else timestamp|default('‚Äî')) }}

---

{# ========================= KPI / SUMMARY ======================== #}
{% set total = total_count|default(results|length) %}
{% set passed = pass_count|default(0) %}
{% set failed = fail_count|default(0) %}
{% set warns = warn_count|default(0) %}
{% set errors = error_count|default(0) %}
{% set other = other_count|default(total - passed - failed - warns - errors) %}
{% set compliance = (100.0 * passed / total) | round(1) if total > 0 else 0 %}

**–ò—Ç–æ–≥–∏:** –≤—Å–µ–≥–æ **{{ total }}**, ‚úÖ –ø—Ä–æ–π–¥–µ–Ω–æ **{{ passed }}**, ‚ùå –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ **{{ failed }}**, üö® –æ—à–∏–±–æ–∫ **{{ errors }}**, ‚ö†Ô∏è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π **{{ warns }}**, ‚ùî –ø—Ä–æ—á–µ–µ **{{ other }}**.
**–ò–Ω–¥–µ–∫—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:** **{{ compliance }}%**

---

{# =================== –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ú–û–î–£–õ–Ø–ú ==================== #}
{% for module, checks in results | groupby('module') %}
## –ú–æ–¥—É–ª—å: {{ module | capitalize }} ({{ checks | length }} –ø—Ä–æ–≤–µ—Ä–æ–∫)

| ‚Ññ | –ü—Ä–æ–≤–µ—Ä–∫–∞ | Severity | –§–°–¢–≠–ö ‚Ññ21 | Assert | –†–µ–∑—É–ª—å—Ç–∞—Ç | –û–∂–∏–¥–∞–Ω–∏–µ | –§–∞–∫—Ç (—Ñ—Ä–∞–≥–º–µ–Ω—Ç) |
|---|---|---|---|---|---|---|---|
{% for check in checks %}
  {% set s = norm_status(check) %}
  {% set fl = check|fstek_details %}
| {{ loop.index }} | {{ check.name }} | {{ sev_badge(check.severity) }} | {{ fstec_codes(fl) }} |
  `{{ check.assert_type|default('exact') }}` | {{ status_badge(s) }} |
  `{{ format_expect(check.expect) }}` |
  `{{ short_output(check.output) }}` |
{% endfor %}

{% endfor %}

---

{# ============== –°–í–û–î–ö–ê –ü–û –ú–ï–†–ê–ú –§–°–¢–≠–ö ‚Ññ21 (–µ—Å–ª–∏ –µ—Å—Ç—å) ============== #}
{% set fstek_summary = fstek_summary|default([], true) %}
{% if fstek_summary %}
## –°–≤–æ–¥–∫–∞ –ø–æ –º–µ—Ä–∞–º –§–°–¢–≠–ö ‚Ññ21
| –ú–µ—Ä–∞ | –û–ø–∏—Å–∞–Ω–∏–µ | –í—Å–µ–≥–æ | ‚úÖ Pass | ‚ùå Fail | ‚ö†Ô∏è Error |
|---|---|---:|---:|---:|---:|
{% for item in fstek_summary %}
| **{{ item.code }}** | {{ item.description|default('‚Äî') }} | {{ item.total }} | {{ item.passed }} | {{ item.failed }} | {{ item.errored }} |
{% endfor %}
{% else %}
_–¢–µ–≥–∏ –§–°–¢–≠–ö ‚Ññ21 –≤ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç._
{% endif %}

---

{# ============== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø (HIGH) ============== #}
{% set highs = high_findings|default([], true) %}

## –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (High)
{% if highs %}
{% for r in highs %}
- **{{ r.name }}** (`{{ r.id }}`)
  - –ú–æ–¥—É–ª—å: `{{ r.module }}`
  - **–ú–µ—Ä—ã –§–°–¢–≠–ö ‚Ññ21:** {{ fstec_summary(r|fstek_details) }}
  - –û–∂–∏–¥–∞–Ω–∏–µ: `{{ format_expect(r.expect) }}`
  - Assert: `{{ r.assert_type|default('exact') }}`
  {% if r.command %}
  - –ö–æ–º–∞–Ω–¥–∞:
    ```bash
    {{ r.command }}
    ```
  {% endif %}
  - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥:
    ```
    {{ r.output|default('‚Äî', true)|trim }}
    ```
{% endfor %}
{% else %}
_–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ._
{% endif %}

---

{# ======================== –ö–û–ù–¢–ï–ö–°–¢ –•–û–°–¢–ê ======================== #}
## –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
{% set host_info = host if host is defined else {} %}
{% macro host_value(value) -%}
  {%- if value is mapping -%}
    {%- set text = value|tojson(ensure_ascii=False) -%}
  {%- elif value is sequence and (value is not string) -%}
    {%- set text = value|join(', ') -%}
  {%- else -%}
    {%- set text = value|default('‚Äî', true) -%}
  {%- endif -%}
  {{ (text|string|trim) if text is defined and (text|string|trim) != '' else '‚Äî' }}
{%- endmacro %}
{% set raw_ip = (host_info.ip if host_info.ip is defined else
                 (host_info.ipv4 if host_info.ipv4 is defined else
                 (host_info.address if host_info.address is defined else
                 (host_info.ip_address if host_info.ip_address is defined else
                 None)))) %}
- –•–æ—Å—Ç: **{{ host_info.hostname|default('‚Äî') }}**
- IP-–∞–¥—Ä–µ—Å: **{{ host_value(raw_ip) }}**
- –û–°: **{{ host_info.os|default('‚Äî') }}**
- –Ø–¥—Ä–æ: **{{ host_info.kernel|default('‚Äî') }}**
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: **{{ host_info.arch|default('‚Äî') }}**
- –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: **{{ (now.strftime("%Y-%m-%d %H:%M:%S") if now is defined else timestamp|default('‚Äî')) }}**

{# ============================= END ============================= #}
